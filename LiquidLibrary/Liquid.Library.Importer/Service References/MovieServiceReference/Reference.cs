//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Liquid.Library.Importer.MovieServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Entity", Namespace="http://schemas.datacontract.org/2004/07/Liquid.Domain")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Liquid.Library.Importer.MovieServiceReference.Movie))]
    public partial class Entity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movie", Namespace="http://schemas.datacontract.org/2004/07/Liquid.Library.Domain.Inventory")]
    [System.SerializableAttribute()]
    public partial class Movie : Liquid.Library.Importer.MovieServiceReference.Entity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Liquid.Library.Importer.MovieServiceReference.MovieFormat FormatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Liquid.Library.Importer.MovieServiceReference.MovieFormat Format {
            get {
                return this.FormatField;
            }
            set {
                if ((this.FormatField.Equals(value) != true)) {
                    this.FormatField = value;
                    this.RaisePropertyChanged("Format");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MovieFormat", Namespace="http://schemas.datacontract.org/2004/07/Liquid.Library.Domain.Inventory")]
    public enum MovieFormat : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        DVD = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BluRay = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MovieServiceReference.IMovieApiService")]
    public interface IMovieApiService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieApiService/CreateNew", ReplyAction="http://tempuri.org/IMovieApiService/CreateNewResponse")]
        void CreateNew(Liquid.Library.Importer.MovieServiceReference.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieApiService/CreateNew", ReplyAction="http://tempuri.org/IMovieApiService/CreateNewResponse")]
        System.Threading.Tasks.Task CreateNewAsync(Liquid.Library.Importer.MovieServiceReference.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieApiService/List", ReplyAction="http://tempuri.org/IMovieApiService/ListResponse")]
        Liquid.Library.Importer.MovieServiceReference.Movie[] List();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMovieApiService/List", ReplyAction="http://tempuri.org/IMovieApiService/ListResponse")]
        System.Threading.Tasks.Task<Liquid.Library.Importer.MovieServiceReference.Movie[]> ListAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMovieApiServiceChannel : Liquid.Library.Importer.MovieServiceReference.IMovieApiService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MovieApiServiceClient : System.ServiceModel.ClientBase<Liquid.Library.Importer.MovieServiceReference.IMovieApiService>, Liquid.Library.Importer.MovieServiceReference.IMovieApiService {
        
        public MovieApiServiceClient() {
        }
        
        public MovieApiServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MovieApiServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieApiServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MovieApiServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateNew(Liquid.Library.Importer.MovieServiceReference.Movie movie) {
            base.Channel.CreateNew(movie);
        }
        
        public System.Threading.Tasks.Task CreateNewAsync(Liquid.Library.Importer.MovieServiceReference.Movie movie) {
            return base.Channel.CreateNewAsync(movie);
        }
        
        public Liquid.Library.Importer.MovieServiceReference.Movie[] List() {
            return base.Channel.List();
        }
        
        public System.Threading.Tasks.Task<Liquid.Library.Importer.MovieServiceReference.Movie[]> ListAsync() {
            return base.Channel.ListAsync();
        }
    }
}
